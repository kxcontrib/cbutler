<!DOCTYPE HTML><html><head><title>Kdbchart Example Page © 2012 Carlos Butler</title><meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /><link rel="shortcut icon" href="http://kdbchart.com/favicon.ico" /><style type="text/css">@charset"UTF-8";@import url(http://fonts.googleapis.com/css?family=Ubuntu);@import url(http://fonts.googleapis.com/css?family=Nothing+You+Could+Do);body,div,ul,ol,li,h1,h2,h3,pre,code,form,fieldset,legend,textarea,p,blockquote,th,td{margin:0;padding:0;}body{border:0;background-color:rgb(102,102,102);font-family:"Lucida Grande","Helvetica Neue",Helvetica,sans-serif;color:rgb(30,30,30);font-size:12px;margin:auto;padding:0;}a{text-decoration:none;outline:none;color:rgb(125,125,125);}a:hover,a:focus{color:rgb(125,125,125);text-decoration:underline;}p{margin:5px auto;}pre{background-color:rgb(225,225,225);border:1px dotted rgb(180,180,190);border-left:8px solid rgb(180,180,190);font-family:"Courier New",Courier,monospace;color:rgb(34,139,34);word-wrap:break-word;white-space:pre-wrap;margin:10px auto;padding:5px;}h1{font-family:Ubuntu,sans-serif;font-size:45px;color:rgb(40,40,40);text-shadow:0 1px 0 rgba(255,255,255,.4);text-align:center;margin:10px 0 3px;}.h1L,.h1L a:link,.h1L a:visited,.h1L a:hover,.h1L a:active{font-family:"Nothing You Could Do",monospace;font-size:15px;color:rgb(255,169,0);text-align:center;}h2{color:rgb(50,50,50);text-shadow:0 1px 0 rgba(255,255,255,.5);}li{margin-left:20px;color:rgb(60,60,60);}#t{float:left;position:absolute;top:5px;left:10px;}#t,#t a:link,#t a:visited,#t a:hover,#t a:active{color:rgb(30,30,30);}#m{width:900px;background-color:rgb(245,245,245);border-radius:6px;box-shadow:0 0 9px rgb(25,25,25);margin:20px auto 60px;padding:10px;}#f{width:100%;height:30px;line-height:30px;position:fixed;bottom:0;background-color:rgb(35,30,30);}#f p{width:900px;text-align:right;font-style:italic;font-size:12px;margin:0 auto;}#f,#f a:link,#f a:visited,#f a:hover,#f a:active{color:rgb(245,245,245);}.h1L a:hover,.h1L a:active,#f a:hover,#f a:active{text-decoration:underline;}.w{background-color:#fbf5d0;border:1px solid #f9dd34;border-left:8px solid rgb(255,69,0);color:#363636;margin:10px auto;padding:5px;}
	/* The charts do not use any of this CSS, so ignore it. */</style>

	<!-- START:relevant markup for charts -->
	<script type="text/javascript" src="scripts/kc.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/jquery-latest.pack.js"></script>
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script type="text/javascript" src="http://kx.com/q/c/c.js"></script>
	<script type="text/javascript">
		// Load the Google chart libraries. Generally "corechart" will cover every type of chart used in finance, however more packages and options for google.load can be found here: https://developers.google.com/chart/interactive/docs/library_loading_enhancements
		google.load('visualization', '1.0', {'packages':['corechart']});
		google.setOnLoadCallback(myCallbackFunction);
	
		function myCallbackFunction(){
			// Create the web socket connection
			KC_WSCreate();

			/*	State the data criteria and the chart(s) options in a list of lists.
				Charts will load from top to bottom (left to right)
				If you are going to create JavaScript on the server, the easiest way is to create a one-line string that can then be run using the JavaScript eval() function.

				var charts=[
					["select statement1","Chart Type","Title 1","div ID"],
					["select statement2","Chart Type","Title 2","div ID"],
					["select ..."]
				];

				The data returned should be in the form stated in the Date Format section on the Google page for that specific chart: 
				https://developers.google.com/chart/interactive/docs/gallery/linechart#Data_Format

				Generally, the first column (column 0) should be discrete (group label) or continuous (date, datetime etc)

				NOTE: If an options appears not to work, ensure capital letters are correctly used.
				i.e. {...,hAxis:{...}} <> {...,haxis:{...}}

				Also, if one chart fails to load, the others should load regardless.

				And if using the \ to split up a JavaScript string over multiple lines, to have NO characters after it or it will error as an unterminated literal.
			*/
			var statement="select Year,Sales,Expenses from kc_sales",
			chartType="LineChart",
			youCanSetOptionsLikeThis="{title:'Four Year Sales and Expenses'}",
			divID="kc_lc";

			var MyAmazingCharts=[
// Area Chart
["select Year,Sales,Expenses from kc_sales","AreaChart","{title:'Four Year Sales and Expenses'}","kc_ac"],

// Bar Chart
["select Year,Sales,Expenses from kc_sales","BarChart",youCanSetOptionsLikeThis,"kc_bc"],

// Candlestick Charts
["?[`kc_cc_1;();0b;`Date`Low`Open`Close`High!`Date`Low`Open`Close`High]",
"CandlestickChart",
"{title:'Stocks Two Weeks'}",
"kc_cc1"],
["?[`kc_cc_2;();0b;`Date`Low`Open`Close`High!`Date`Low`Open`Close`High]",
"CandlestickChart",
"{title:'Stocks Many Weeks'}",
"kc_cc2"],

// Column Chart
["select Year,Sales,Expenses from kc_sales","ColumnChart",
"{\
title:'Four Year Sales and Expenses',\
hAxis:{title:'Year',titleTextStyle:{color:'red'}}\
}",
"kc_colc"],

// Combo Chart
["kc_comboc","ComboChart","{\
	title:'Monthly Coffee Production by Country',\
	hAxis:{title:'Month',titleTextStyle:{color:'rgb(30,144,255)'}},\
	vAxis:{title:'Cups',titleTextStyle:{color:'#676767'}},\
	seriesType:'bars',\
	series:{3:{type:'line'}}\
}","kc_comboc"],

// Line Chart
[statement,chartType,youCanSetOptionsLikeThis,divID],

// Pie Chart
["kc_pc","PieChart","{title:'Hours Spent Doing Things'}","kc_pc"],

// Scatter Chart
["select Sales,Expenses from kc_sales","ScatterChart","{\
	title:'Sales vs. Expenses',\
	hAxis:{title:'Sales'},\
	vAxis:{title:'Expenses'}\
}","kc_sc"]
			];

			// pass the array to the KC_ChartMake function
			KC_ChartMake(MyAmazingCharts);
		}
	</script>
	<!-- END:relevant JavaScript for charts -->


</head>
<body><div id="t"><p>Last update: 7th August 2012</p><p>- <a href="http://code.kx.com/" target="_blank">code.kx</a> - <a href="http://code.kx.com/wiki/Contrib#Carlos_Butler" target="_blank">contrib</a></p><p>- <a href="http://code.google.com/p/kdbchart/issues/list" target="_blank">Tracker</a></p><p>- <a href="http://kdbchart.com" target="_blank">Kdbchart.com</a></p></div><h1>Test Page</h1><div class="h1L"><a href="http://www.carlosbutler.com" target="_blank">&copy; Carlos Butler</a></div><div id="m"><style type="text/css">.c{width:600px;height:400px;margin:auto;}</style><h2>Explanation</h2><p>This charting tool is designed to easily display data from a Q server to your users in different charts. The tool attempts to do most of the work on the client browser, thus reducing server strain. Nevertheless, the client's browser will not (should not) freeze or slow down.<br /><br />As a developer, all you need to write is just one line of code:
<pre>
KC_ChartMake([["kc_pc","PieChart","{title:'Hours Spent Doing Things'}","kc_pc"]]);
</pre>Of course it would be very naïve to think that one line can do it all, but it is not that far off the truth. Read on to find out.<br /><br /><br /></p><div class="w">Please note that charts will not load until the JavaScript file has been configured (see section 2 - Settings) and the Q server is running kc.q.</div><h2>1 Installation</h2><p><b>HTML and JavaScript</b><br />You need to include these files in your &lt;head&gt; tag.
<pre>
&lt;script type="text/javascript" src="scripts/kc.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://code.jquery.com/jquery-latest.pack.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://www.google.com/jsapi"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://kx.com/q/c/c.js"&gt;&lt;/script&gt;
</pre>This next &lt;script&gt; does not need to be in the &lt;head&gt; section, but it is recommended. google.load will load the JavaScript libraries from the Google servers, where different packages can be specified. However, all charts included in this will work with the 'corechart' package.<br /><br />google.setOnLoadCallback will fire the funtion specified when the libraries have been loaded successfully. It is recommended that you create connections to your server(s) in the callback function.<br /><br />KC_WSCreate will create the WebSocket to the server. There is nothing stopping you from having more than one WebSocket (even to the same server if you wish).
<pre>
&lt;script type="text/javascript"&gt;
	google.load('visualization', '1.0', {'packages':['corechart']});
	google.setOnLoadCallback(myCallbackFunction);

	function myCallbackFunction(){
		KC_WSCreate();
</pre>Charts must be defined in a list of lists, with exactly one level of nesting. Each nested four element list represents a new chart. Please ensure that these are lists (arrays) and not JSON objects.<br /><br />The four element list is in the form (note that each element is a string):<br />[["select statement","chart type - see kc.js","chart options","div ID"],[ _ , _ , _ , _ ], _ ]
<pre>
		var MyAmazingCharts=[
			["select Year,Sales,Expenses from kc_sales",
			"AreaChart",
			"{title:'Four Year Sales and Expenses'}",
			"kc_ac"]
		];
		KC_ChartMake(MyAmazingCharts);
	}
&lt;/script&gt;
</pre>A DIV element is used as a container for a chart. You must set a width and height for the DIV, an give it an ID. This is is the same as the fourth element in the list stated above, in this case id="kc_ac". Create a standard DIV tag in the &lt;body&gt;.
<pre>
&lt;div id="kc_ac" style="width:600px;height:400px;margin:auto"&gt;&lt;/div&gt;
</pre><b>Q</b><br />You will need to load kc.q in to your session as well, which will attempt to load test data. It is recommended that you merely copy the <i>kc</i> folder to your home Q directory (click to enlarge) when trying out this out for the first time, and copy and paste the snippets of code you require in to your own system:<br /><div style="width:799px;margin:auto"><img src="scripts/p.png" width="799px" height="466px" /></div></p><h2>2 Settings</h2><p>There are three CONSTANTS in kc.js that must be looked at before any charts will load.
<pre>
var KC_IN_DEV=true, // change to false when not in development, doing so will stop any warning and error messages
KC_Q_SERVER_URL="192.168.0.2:5001", // use only the IP address and port number for the q server
KC_WS_SECURE=false, // using a secure WebSocket connection?
</pre><br /></p><h2>3 Try It Out</h2><p>In the same directory as this file there is another another called test.htm. This is the least amount of HTML required to get a chart to load. <a href="test.htm" target="_blank">Click here to load it in another tab.</a><br /><br /></p><h2>4 Suggestions and Bugs</h2><p>A ticket system has been setup here: <a href="http://code.google.com/p/kdbchart/issues/list" target="_blank">http://code.google.com/p/kdbchart/issues/list</a>. Please post whatever suggestion you may have their so others may see it, otherwise email c@butler.cc and they will be added.<br /><br /></p><h2>5 License</h2><p><ul><li>You may redistribute this code as long as a copyright notice, (c) Carlos Butler, is kept and is in sight (comment in code, for example).</li><li>You may alter as you wish and redistribute, as long as rule 1 is adhered to. Altered code can be copyrighted to yourself if you so wish.</li><li>I, Carlos Butler, am not responsible for any unwanted side effects that may occur from the use of this software.<li>You may NOT sell this code in any form or method, whether it be as a software package or software solution, without contacting me at <a href="mailto:c@butler.cc">c@butler.cc</a></li></ul><br /></p>


	<!-- START:relevant HTML for charts -->
	<h2>6 Examples of Charts Available</h2>
	<p>
		Here are all the charts that can be used with Kdbchart. Nothing will load unless you have a Q session running. Please see kc.js to edit the Q server address. The chart descriptions are from Google charts.<br />
		<div class="w">IMPORTANT: Read through every example (there are only eight of them) as each example shows different ways to load a chart.</div><br />
	</p>
	
	<h2>-Area Chart</h2>
	<p>
		An area chart that is rendered within the browser using SVG or VML. Displays tips when hovering over points.
<pre>
KC_ChartMake([["select Year,Sales,Expenses from kc_sales","AreaChart","{title:'Four Year Sales and Expenses'}","kc_ac"]]);
</pre>
<div class="w">KC_ChartMake() function takes in just one parameter, a nested list of lists to exactly one level. List=[[...],[...],...];<br />Each nested list represents one chart to be loaded. The nested list goes in the form of (each paramter is a string):<br />["select statement","type of chart (see kc.js for more)","extra options in the form of a JSON object","div ID"].<br /><br />There are different ways to specify chart options ("{title:'...'}"), there is a more in depth explanation in the Column Chart below.</div>
	</p>
	<div id="kc_ac" class="c"></div>
	


	<h2>-Bar Chart</h2>
	<p>
		A horizontal bar chart that is rendered within the browser using SVG or VML. Displays tips when hovering over bars. For a vertical version of this chart, see the Column Chart.
<pre>
var MyAmazingBarChart=[["select Year,Sales,Expenses from kc_sales","BarChart","{title:'Four Year Sales and Expenses'}","kc_bc"]];
KC_ChartMake(MyAmazingBarChart);
</pre>
<div class="w">The lists can be saved to a variable for later use. KC_ChartMake can be called at any time after the WebSocket connection has been established and the callback has occured (see order of loading above).</div>
	</p>
	<div id="kc_bc" class="c"></div>



	<h2>-Candlestick Chart</h2>
	<p>
		A candlestick chart is used to show an opening and closing value overlaid on top of a total variance. Candlestick charts are often used to show stock value behavior. In this chart, items where the opening value is less than the closing value (a gain) are drawn as filled boxes, and items where the opening value is more than the closing value (a loss) are drawn as hollow boxes.
<pre>
var MyTwoCandlestickCharts=[
["?[`kc_cc_1;();0b;`Date`Low`Open`Close`High!`Date`Low`Open`Close`High]",
"CandlestickChart",
"{title:'Stocks Two Weeks'}",
"kc_cc1"],

["?[`kc_cc_2;();0b;`Date`Low`Open`Close`High!`Date`Low`Open`Close`High]",
"CandlestickChart",
"{title:'Stocks Many Weeks'}",
"kc_cc2"]
];
KC_ChartMake(MyTwoCandlestickCharts);
</pre>
<div class="w">Here are two charts being created. Note that the command can be a functional statement. The second chart is loading a table with 1260 cells, being parsed to CSV and then converted to JSON with no delay. Generally a delay could occur with much larger amounts of data as the CPU and browser struggle to draw the chart, and not with the data itself.<br /><br />You can also see that the JavaScript is broken up over multiple lines - although remember JavaScript cannot handle strings over multiple lines without an escape character (see next example).</div>
	</p>
	<div id="kc_cc1" class="c"></div>
	<div id="kc_cc2" class="c"></div>



	<h2>-Column Chart</h2>
	<p>
		A vertical bar chart that is rendered within the browser using SVG or VML. Displays tips when hovering over bars. For a horizontal version of this chart, see the Bar Chart.
<pre>
var ColumnChart=[["select Year,Sales,Expenses from kc_sales","ColumnChart",
"{\
title:'Four Year Sales and Expenses',\
hAxis:{title:'Year',titleTextStyle:{color:'red'}}\
}",
"kc_colc"]];KC_ChartMake(ColumnChart);
</pre>
<div class="w">Here you can see that the options are specified over multiple lines. As the options must all be in one string, the only way to split a JavaScript string over multiple lines is using the \ escape character. It is important to remember that there must be absoultely no characters after the backslash (except of course for the new line).</div>
	</p>
	<div id="kc_colc" class="c"></div>



	<h2>-Combo Chart</h2>
	<p>
		A chart that lets you render each series as a different marker type from the following list: line, area, bars, candlesticks and stepped area. To assign a default marker type for series, specify the seriesType property. Use the series property to specify properties of each series individually.
<pre>
var ComboChart=[["kc_comboc","ComboChart","{\
	title:'Monthly Coffee Production by Country',\
	hAxis:{title:'Month',titleTextStyle:{color:'rgb(30,144,255)'}},\
	vAxis:{title:'Cups',titleTextStyle:{color:'#676767'}},\
	seriesType:'bars',\
	series:{3:{type:'line'}}\
}","kc_comboc"];
KC_ChartMake(ComboChart);
</pre>
<div class="w">Here, the main data is the bars displying cups of coffee produced, with the average as the line chart laid on top. The JSON object "series:{...}" states the details for overlaid chart. There is a better explanation on the Google chart on how to structure the JSON and the data required.</div>
	</p>
	<div id="kc_comboc" class="c"></div>



	<h2>-Line Chart</h2>
	<p>
		A line chart that is rendered within the browser using SVG or VML. Displays tips when hovering over points.
<pre>
var statement="select Year,Sales,Expenses from kc_sales",
chartType="LineChart",
youCanSetOptionsLikeThis="{title:'Four Year Sales and Expenses'}",
divID="kc_lc";
var LineChart=[[statement,chartType,youCanSetOptionsLikeThis,divID]];
KC_ChartMake(LineChart);
</pre>
<div class="w">The chart options can also be specified in a string varaible beforehand.</div>
	</p>
	<div id="kc_lc" class="c"></div>



	<h2>-Pie Chart</h2>
	<p>
		A pie chart that is rendered within the browser using SVG or VML. Displays tooltips when hovering over slices.
<pre>
var MyPie=[["kc_pc","PieChart","{title:'Hours Spent Doing Things'}","kc_pc"]];
KC_ChartMake(MyPie);
</pre>
<div class="w">You can load a table straight without QSQL.</div>
	</p>
	<div id="kc_pc" class="c"></div>



	<h2>-Scatter Chart</h2>
	<p>
		A scatter chart that is rendered within the browser using SVG or VML. Displays tips when hovering over points. A scatter chart is used to map correlation between sets of numbers.
<pre>
var Scat=[["select Sales,Expenses from kc_sales","ScatterChart","{\
	title:'Sales vs. Expenses',\
	hAxis:{title:'Sales'},\
	vAxis:{title:'Expenses'}\
}","kc_sc"]];
KC_ChartMake(Scat);
</pre>
<div class="w">Certain types of charts really should have (but not compulsory) titles for each axis.</div>
	</p>
	<div id="kc_sc" class="c"></div>
	<!-- END:relevant HTML for charts -->


</div></body></html>